AUFGABE 3
Give the types and class constraints for each of:

second xs      =  head (tail xs)
swap (x, y)    =  (y, x)
pair x y       =  (x, y)
double x       =  x * 2
palindrome xs  =  reverse xs == xs
twice f x      =  f (f x)

Via ghci:

*Main> :t second
second :: [a] -> a
*Main> :t swap
swap :: (t1, t) -> (t, t1)
*Main> :t pair
pair :: t -> t1 -> (t, t1)
*Main> :t double
double :: Num a => a -> a
*Main> :t palindrome
palindrome :: Eq a => [a] -> Bool
*Main> :t twice
twice :: (t -> t) -> t -> t


AUFGABE 4
Use equational reasoning to compute the result of
filter (== 3) [1,2,3]
(on paper).  Give all intermediate steps.

*Main> filter (== 3) [1,2,3]
[3]

Steps:
ret [];
if 1 == 3 {ret.add(3);}
if 2 == 3 {ret.add(3);}
if 3 == 3 {ret.add(3);}
return ret


AUFGABE 5
foldr/foldl
Prelude> foldr (-) 54 [10, 11]
53

Starting accumulator = 54
11 -   54  = -43
10 - (-43) =  53

Man kÃ¶nnte die Funktion rekursiv definieren:
fold f acc [] = acc
fold f acc (x:xs) = f acc x

AUFGABE 6
concat' :: [[a]] -> [a]
concat' [] = []
concat' (x:xs) = x ++ concat' xs

concat'' xs = foldl (++) [] xs 

